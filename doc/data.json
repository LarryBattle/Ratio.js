{
    "project": {
        "file": "..\\src\\Ratio.js",
        "line": 1,
        "purpose": "Provides a Ratio(Fraction) object for Javascript. Similar to Fraction.py for Python.",
        "author": "Larry Battle , <http://bateru.com/news/>",
        "license": "MIT and GPL 3.0\nMIT License <http://www.opensource.org/licenses/mit-license>\nGPL v3 <http://opensource.org/licenses/GPL-3.0>",
        "info": "Project page: <https://github.com/LarryBattle/Ratio.js/>",
        "version": "0.3.4",
        "note": "Uses YUI-DOC to generate documentation.",
        "is_constructor": 1,
        "chainable": 1,
        "params": [
            {
                "name": "numerator",
                "description": "can be a Ratio object or numeric value.",
                "type": "Ratio|String|Number",
                "optional": true,
                "optdefault": "0"
            },
            {
                "name": "denominator",
                "description": "can be a Ratio object or numeric value.",
                "type": "Ratio|String|Number",
                "optional": true,
                "optdefault": "1"
            },
            {
                "name": "alwaysReduce",
                "description": "if true, then the Ratio object and the child of it will always represent the simplified form of the rational.",
                "type": "Boolean",
                "optional": true
            }
        ],
        "return": {
            "description": "object that has a numerator and denominator, corresponding to a/b.",
            "type": "Ratio"
        },
        "example": [
            "\nRatio(2,4).toString() == Ratio(\"2/4\").toString() == \"2/4\"\n*/var Ratio=function(e,t,n){return this instanceof Ratio?(this.divSign=\"/\",this.alwaysReduce=!!n,this.denominator=t,this.numerator=e,this.correctRatio()):new Ratio(e,t,n)};Ratio.VERSION=\"0.3.4\",Ratio.isNumeric=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},Ratio.getValueIfDefined=function(e,t){return typeof t!=\"undefined\"&&t!==null?t:e},Ratio.gcd=function(e,t){var n;t=+t&&+e?+t:0,e=t?e:1;while(t)n=e%t,e=t,t=n;return Math.abs(e)},Ratio.getNumeratorWithSign=function(e,t){var n=+e*(+t||1)<0?-1:1;return Math.abs(+e)*n},Ratio.getTypeGuess=function(e){var t=\"NaN\";return e instanceof Ratio?t=\"Ratio\":isNaN(e)?/\\d\\s*[^\\s\\d\\w]/.test(e)&&(/\\d\\s+[+\\-]?\\d/.test(e)?t=\"mixed\":t=\"fraction\"):(t=\"number\",/e/i.test(+e)?t=\"e\":e%1&&(t=\"decimal\")),t},Ratio.parseToArray=function(e){var t=[],n,r=[],i;switch(Ratio.getTypeGuess(e)){case\"mixed\":t=e.match(/(\\S+)\\s+(\\S.*)/),r=Ratio.parseToArray(t[2]),n=0<parseFloat(t[1])*r[0]?1:-1,r[0]=n*(Math.abs(r[0])+Math.abs(t[1]*r[1]));break;case\"fraction\":t=e.split(/[^\\s\\d\\w]/),r[0]=Ratio.getNumeratorWithSign(t[0],t[1]),r[1]=Math.abs(+t[1]);break;case\"decimal\":t=(+e).toString().split(/\\./),r[1]=Math.pow(10,t[1].length),r[0]=Math.abs(t[0])*r[1]+ +t[1],r[0]=/\\-/.test(t[0])?-r[0]:r[0];break;case\"number\":r=[+e,1];break;case\"e\":t=(+e).toString().split(/e/i),i=Ratio.parseToArray(t[0]),n=Math.abs(+e)<1?[0,1]:[1,0],r[n[0]]=i[n[0]],r[n[1]]=+(i[n[1]]+\"e\"+Math.abs(+t[1]));break;case\"Ratio\":r=[e.numerator,e.denominator];break;default:r=[NaN,1]}return r},Ratio.parse=function(e,t){var n=Ratio.parseToArray(e),r;return n.length&&typeof t!=\"undefined\"&&t!==null&&(r=Ratio.parseToArray(t),n[0]*=r[1],n[1]*=r[0]),new Ratio(n[0],n[1])},Ratio.reduce=function(e,t){e=Ratio.parse(e,t);var n=e.numerator,r=e.denominator,i=Ratio.getRepeatProps(n/r);i.length&&(n=+i.join(\"\")- +(i[0]+\"\"+i[1]),r=Math.pow(10,i[1].length)*(Math.pow(10,i[2].length)-1));var s=Ratio.gcd(n,r);return[n/s,r/s]},Ratio.getRepeatProps=function(e){e=\"\"+(e||\"\");var t=/(?:[^\\.]+\\.\\d*)(\\d{2,})+(?:\\1)$/,n=[],r=t.exec(e),i,s=/^(\\d+)(?:\\1)$/;return r||(e=e.replace(/\\d$/,\"\"),r=t.exec(e)),r&&1<r.length&&/\\.\\d{10}/.test(r[0])&&(r[1]=s.test(r[1])?s.exec(r[1])[1]:r[1],i=new RegExp(\"(\"+r[1]+\")+$\"),n=e.split(/\\./).concat(r[1]),n[1]=n[1].replace(i,\"\")),n},Ratio.getPrimeFactors=function(e){e=Math.floor(e);var t,n=[],r,i=Math.sqrt,s=1<e&&isFinite(e);while(s){t=i(e),r=2;if(e%r){r=3;while(e%r&&(r+=2)<t);}r=t<r?e:r,n.push(r),s=r!=e,e/=r}return n},Ratio.getCleanENotation=function(e){e=(+e||0).toString();if(/\\.\\d+(0|9){8,}\\d?e/.test(e)){var t=e.match(/(?:\\d+\\.)(\\d+)(?:e.*)/)[1].replace(/(0|9)+\\d$/,\"\").length+1;e=(+e).toPrecision(t).toString()}return e},Ratio.prototype={constructor:Ratio,correctRatio:function(){var e=this.numerator;b=this.denominator,typeof b==\"undefined\"&&(b=1,typeof e==\"undefined\"&&(e=0)),this.denominator=+Math.abs(b),this.numerator=Ratio.getNumeratorWithSign(e,b||1);if(this.denominator&&this.alwaysReduce){var t=Ratio.reduce(this);this.numerator=t[0],this.denominator=t[1]}return this},toArray:function(){return[this.numerator,this.denominator]},valueOf:function(){return this.numerator/this.denominator},toLocaleString:function(){var e=this.valueOf(!0),t,n,r=1e-9;return isNaN(e)?n=\"NaN\":e%1===0||this.denominator===1||!isFinite(e%1)?n=\"\"+e:1<Math.abs(e)?Math.abs(e-e.toFixed(0))<r?n=e.toFixed(0):(t=parseInt(e,10),n=t+\" \"+Math.abs(this.numerator%this.denominator)+this.divSign+this.denominator):n=\"\"+this.numerator+this.divSign+this.denominator,n},toString:function(){return\"\"+this.numerator+this.divSign+this.denominator},clone:function(e,t,n){var r=Ratio.getValueIfDefined;return e=r(this.numerator,e),t=r(this.denominator,t),n=r(this.alwaysReduce,n),new Ratio(e,t,n)},reduce:function(){var e=Ratio.reduce(this.numerator,this.denominator);return this.clone(e[0],e[1])},add:function(e,t){if(!(e instanceof Ratio)||typeof t!=\"undefined\")e=Ratio.parse(e,t);var n,r,i;return this.denominator==e.denominator?(r=this.numerator+e.numerator,i=this.denominator):(n=Ratio.gcd(this.denominator,e.denominator),r=(this.numerator*e.denominator+this.denominator*e.numerator)/n,i=this.denominator*e.denominator/n),this.clone(r,i)},divide:function(e,t){if(!(e instanceof Ratio)||typeof t!=\"undefined\")e=Ratio.parse(e,t);return this.clone(this.numerator*e.denominator,this.denominator*e.numerator)},equals:function(e){var t=Ratio.isNumeric(e)||e instanceof Ratio?e.valueOf(!0):Ratio.parse(e).valueOf(!0);return this.numerator/this.denominator==+t},deepEquals:function(e){return e instanceof Ratio&&this.numerator===e.numerator&&this.denominator===e.denominator},multiply:function(e,t){if(!(e instanceof Ratio)||typeof t!=\"undefined\")e=Ratio.parse(e,t);return this.clone(this.numerator*e.numerator,this.denominator*e.denominator)},subtract:function(e,t){if(!(e instanceof Ratio)||typeof t!=\"undefined\")e=Ratio.parse(e,t);return e.numerator=-e.numerator,this.add(e)},descale:function(e){return this.clone(this.numerator/e,this.denominator/e)},pow:function(e){return this.clone(Math.pow(this.numerator,+e),Math.pow(this.denominator,+e))},scale:function(e){return this.clone(this.numerator*+e,this.denominator*+e)},cleanFormat:function(){var e=/^\\d+\\.\\d+$/;if(e.test(this.numerator)||e.test(this.denominator))return Ratio.parse(this.numerator,this.denominator);var t=this.clone();return t.numerator=Ratio.getCleanENotation(t.numerator),t.denominator=Ratio.getCleanENotation(t.denominator),t},abs:function(){return this.clone(Math.abs(this.numerator))},mod:function(){return this.clone(this.numerator%this.denominator,1)},negate:function(){return this.clone(-this.numerator)},isProper:function(){return Math.abs(this.numerator)<this.denominator},findX:function(e){var t=(\"\"+e).split(\"/\");return t.length!==2?null:isNaN(t[0])?Ratio(t[1]).multiply(this):Ratio(t[0]).divide(this)},reciprocal:function(){return this.clone(this.denominator,this.numerator)},approximateTo:function(e){return isNaN(e)?this.clone():this.clone(Math.round(this.valueOf(!0)*e),e)},toQuantityOf:function(){var e=Array.prototype.slice.call(arguments);if(e.length<1)return this.clone(NaN,1);var t=this.valueOf(!0),n=this.approximateTo(e[0]),r,i=1e-9;for(var s=1,o=e.length;s<o&&i<Math.abs(n-t);s++)r=n,n=this.approximateTo(e[s]),Math.abs(r-t)<Math.abs(n-t)&&(n=r);return n}},typeof exports!=\"undefined\"&&(typeof module!=\"undefined\"&&module.exports&&(exports=module.exports=Ratio),exports.Ratio=Ratio);"
        ]
    },
    "files": {
        "..\\src\\Ratio.js": {
            "name": "..\\src\\Ratio.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "..\\src\\Ratio.min.js": {
            "name": "..\\src\\Ratio.min.js",
            "modules": {},
            "classes": {
                "Ratio": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Ratio": {
            "name": "Ratio",
            "shortname": "Ratio",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\src\\Ratio.min.js",
            "line": 1,
            "description": "Ratio is an object that has a numerator and denominator, corresponding to a/b.<br/>\nNote that the keyword `new` is not required to create a new instance of the Ratio object, since this is done for you.<br/>\nIn otherwords, `new Ratio( value )` is the same as `Ratio( value )`.",
            "is_constructor": 1,
            "chainable": 1,
            "params": [
                {
                    "name": "numerator",
                    "description": "can be a Ratio object or numeric value.",
                    "type": "Ratio|String|Number",
                    "optional": true,
                    "optdefault": "0"
                },
                {
                    "name": "denominator",
                    "description": "can be a Ratio object or numeric value.",
                    "type": "Ratio|String|Number",
                    "optional": true,
                    "optdefault": "1"
                },
                {
                    "name": "alwaysReduce",
                    "description": "if true, then the Ratio object and the child of it will always represent the simplified form of the rational.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "object that has a numerator and denominator, corresponding to a/b.",
                "type": "Ratio"
            },
            "example": [
                "\nRatio(2,4).toString() == Ratio(\"2/4\").toString() == \"2/4\""
            ],
            "purpose": "Provides a Ratio(Fraction) object for Javascript. Similar to Fraction.py for Python.",
            "author": "Larry Battle , <http://bateru.com/news/>",
            "license": "MIT and GPL 3.0\nMIT License <http://www.opensource.org/licenses/mit-license>\nGPL v3 <http://opensource.org/licenses/GPL-3.0>",
            "info": "Project page: <https://github.com/LarryBattle/Ratio.js/>",
            "version": "0.3.4",
            "note": "Uses YUI-DOC to generate documentation.\n*//**\nRatio is an object that has a numerator and denominator, corresponding to a/b.<br/>\nNote that the keyword `new` is not required to create a new instance of the Ratio object, since this is done for you.<br/>\nIn otherwords, `new Ratio( value )` is the same as `Ratio( value )`."
        }
    },
    "classitems": [
        {
            "file": "..\\src\\Ratio.js",
            "line": 37,
            "description": "Version number of Ratio.js",
            "itemtype": "property",
            "name": "Ratio.VERSION",
            "type": "String",
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 43,
            "description": "Checks if value is a finite number. <br/> Borrowed from jQuery 1.7.2 <br/>",
            "itemtype": "method",
            "name": "Ratio.isNumeric",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\nRatio.isNumeric(\"1.0e3\") == true"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 55,
            "description": "Returns the default value is the provides new value is undefined or null.<br/>\nSimilar to `var a = (b || c)`.",
            "itemtype": "method",
            "name": "Ratio.getValueIfDefined",
            "params": [
                {
                    "name": "backup",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "example": [
                "\nRatio.getValueIfDefined( 4, null ) == 4"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 69,
            "description": "Find the Greatest Common Factor between two numbers using \"Euler Method\".",
            "itemtype": "method",
            "name": "Ratio.gcd",
            "params": [
                {
                    "name": "a",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "b",
                "type": "Number"
            },
            "example": [
                "\nRatio.gcd(20,12) == 4"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 89,
            "description": "Returns the numerator with the corresponding sign of (top/bottom).<br/>\nUsed to force `top` to represent the sign of the Ratio.",
            "itemtype": "method",
            "name": "Ratio.getNumeratorWithSign",
            "params": [
                {
                    "name": "top",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "bottom",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\nRatio.getNumeratorWithSign(1,-2) == -1"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 104,
            "description": "Provides a quick way to find out the numeric type of an object.\nTypes include: `NaN`, `Ratio`, `number`, `e`, `decimal`, `mixed` and `fraction`",
            "itemtype": "method",
            "name": "Ratio.getTypeGuess",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "type",
                "type": "String"
            },
            "example": [
                "\nRatio.getTypeGuess(\"1/3\") == \"fraction\";"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 134,
            "description": "Converts a numeric value to a Ratio in the form of [top, bottom], such that top/bottom.",
            "itemtype": "method",
            "name": "Ratio.parseToArray",
            "params": [
                {
                    "name": "obj",
                    "description": "Numeric Object.",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array[Number, Number]"
            },
            "example": [
                "\nRatio.parseToArray( 0.125 ) // returns [125, 1000]"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 184,
            "description": "Converts a numeric value to a Ratio object.\nSupports mixed numbers, whole numbers, decimals, scientific numbers and Ratio objects.",
            "itemtype": "method",
            "name": "Ratio.parse",
            "chainable": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "- numerator",
                    "type": "Ratio|Number|String"
                },
                {
                    "name": "obj",
                    "description": "- denominator",
                    "type": "Ratio|Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n//whole numbers <br/>\nRatio.parse(22,7).toString() == \"22/7\";\n\n// mixed numbers <br/>\nRatio.parse(\"3 1/7\").toString() == \"22/7\";\n\n// decimals <br/>\nRatio.parse(22/7).reduce().toLocaleString() == \"3 1/7\";\n\n// fractions <br/>\nRatio.parse(\"22/7\").toLocaleString() == \"3 1/7\";\n\n// scientific notated numbers <br/>\nRatio.parse(\"22e31/70e30\").reduce().toLocaleString() == \"3 1/7\";"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 219,
            "description": "Given a numerator and denominator in the form of [a,b], returns as an array of numbers.",
            "itemtype": "method",
            "name": "Ratio.reduce",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Ratio|Number|String"
                },
                {
                    "name": "obj",
                    "description": "",
                    "type": "Ratio|Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Array[ Number, Number ]"
            },
            "example": [
                "\nExample 1:<br/>\nRatio.reduce( Ratio(36,-36) ) // returns [-1,1]\n\nExample 2:<br/>\nRatio.reduce( \"9/12\" ) // returns [3,4]\n\nExample 3:<br/>\nRatio.reduce( \"10/4\" ).toString() // returns [5,2]"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 248,
            "description": "This function divides a repeating decimal into 3 parts. If the value passed is not a repeating decimal then an empty array is returned.<br/>\nFor repeating decimals, the return value is an array which contains the numeric value split into 3 parts like, <br/>\n[ \"numbers before decimal\", \"numbers before repeating pattern\", \"repeating pattern.\" ].<br/>\nHere's another explanation. <br/>\nThe return value is [i, x, r] for the repeating decimal value.<br/>\nwhere i are the values to the left of the decimal point. <br/>\nx are the decimals to the right of the decimal point and to the left of the repeating pattern.<br/>\nr is the unique repeating patterns for the repeating decimal.<br/>\nExample. 22/7 = 3.142857142857143 = 3.14-285714-285714-3, i = 3, x = 14, r = 285714<br/>\nIt should be noted that the last digit might be removed to avoid rounding errors.",
            "itemtype": "method",
            "name": "Ratio.getRepeatProps",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "an array of 3 numbers.",
                "type": "Array"
            },
            "example": [
                "\nRatio.getRepeatProps( 22/7 ) // returns [\"3\", \"14\", \"285714\"]"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 285,
            "description": "Returns an array of the prime factors of a number. <br/>\nMore info <http://bateru.com/news/2012/05/code-of-the-day-javascript-prime-factors-of-a-number/>",
            "itemtype": "method",
            "name": "Ratio.getPrimeFactors",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "an array of numbers",
                "type": "Array"
            },
            "example": [
                "\nRatio.getPrimeFactors(20) // returns [2,2,5]"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 317,
            "description": "Rounds up a scientific notated number with 8+ trailing 0s or 9s.<br/>\nNote: Returns number as string to preserve value.",
            "itemtype": "method",
            "name": "Ratio.getCleanENotation",
            "params": [
                {
                    "name": "num",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\nExample 1<br/>\nRatio.getCleanENotation( \"1.1000000000000003e-30\" ) === \"1.1e-30\";\n\nExample 2<br/>\nRatio.getCleanENotation( \"9.999999999999999e+22\" ) === \"1e+23\";"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 343,
            "description": "Adjusts the ratio in three ways:\n\n1) Sets the numerator and denominator to default values if undefined. (Default fraction: 0/1)\n2) Places the sign on numerator.\n3) Reduces the function if needed.\nThis function is called after the instances is created.",
            "itemtype": "method",
            "name": "Ratio.prototype.correctRatio",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio().toString(); // `.correctRatio()` was called internally."
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 376,
            "description": "From the Ratio instance, returns the raw values of the numerator and denominator in the form [numerator, denominator].",
            "itemtype": "method",
            "name": "Ratio.prototype.toArray",
            "return": {
                "description": "an array of 2 numbers.",
                "type": "Array"
            },
            "example": [
                "\n   Ratio(1,2).toArray() // returns [1,2]"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 387,
            "description": "From the Ratio instance, returns the computed value of numerator / denominator.",
            "itemtype": "method",
            "name": "Ratio.prototype.valueOf",
            "return": {
                "description": "",
                "type": "Number"
            },
            "example": [
                "\n   Example 1:<br/>\n   Ratio(1,2).valueOf() == 0.5;"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 399,
            "description": "From the Ratio instance, returns a string of the Ratio in fraction form if the numerator and denominator are Rational numbers.<br/>\nNote: If the computed value of (numerator / denominator) is a whole number, then the whole number is returned.<br/>\nNote: If the computed value of (numerator / denominator) is not a number, the result is returned. <br/>",
            "itemtype": "method",
            "name": "Ratio.prototype.toLocaleString",
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n   Example 1:<br/>\n   Ratio(1,10).toLocaleString() == \"1/10\"\n\n   Example 2:<br/>\n   Ratio(0,0).toLocaleString() == \"NaN\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 435,
            "description": "From the Ratio instance, returns the raw values of the numerator and denominator in the form \"a/b\".<br/>\nNote: The division symbol can be change by the use of `divSign` property.",
            "itemtype": "method",
            "name": "Ratio.prototype.toString",
            "return": {
                "description": "",
                "type": "String"
            },
            "example": [
                "\n   Example 1:<br/>\n   Ratio(8,2).toString() == \"8/2\";\n\n   Example 2:<br/>\n   var a = Ratio(8,2);<br/>\n   a.divSign = \":\";<br/>\n   a.toString() == \"8:2\";"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 453,
            "description": "Returns a new instance of the current Ratio.<br/>\nThe clone propery value can be changed if the appropriate argument value is supplied.",
            "itemtype": "method",
            "name": "Ratio.prototype.clone",
            "params": [
                {
                    "name": "top",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "bottom",
                    "description": "",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "alwaysReduce",
                    "description": "",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   var a = Ratio(2,4); <br/>\n   var b = a.clone(); <br/>\n   a.equals(b) === true;"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 474,
            "description": "From the Ratio instance, returns a new instacne with a reduced ratio by factoring out the greatest common multiple.",
            "itemtype": "method",
            "name": "Ratio.prototype.reduce",
            "chainable": 1,
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(10,2).reduce().toString() == \"5/1\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 487,
            "description": "Adds the current Ratio by another Ratio.",
            "itemtype": "method",
            "name": "Ratio.prototype.add",
            "chainable": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Ratio|Number|String"
                },
                {
                    "name": "obj2",
                    "description": "",
                    "type": "Ratio|Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio( 1, 3 ).add( 1,2 ).toString() == \"5/6\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 515,
            "description": "Divides the current Ratio by another Ratio.",
            "itemtype": "method",
            "name": "Ratio.prototype.divide",
            "chainable": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Ratio|Number|String"
                },
                {
                    "name": "obj2",
                    "description": "",
                    "type": "Ratio|Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio( 1,2 ).divide( 3,4 ).toString() == \"2/3\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 532,
            "description": "Compares if the current Ratio and another object have the same value.",
            "itemtype": "method",
            "name": "Ratio.prototype.equals",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n   Ratio(1,2).equals( 1/2 ) === true"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 545,
            "description": "Performs a strict comparison to determine if the current instances and passed object are identical.",
            "itemtype": "method",
            "name": "Ratio.prototype.deepEquals",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n   Ratio(1,2).deepEquals( 1/2 ) === false"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 557,
            "description": "Multiply the current Ratio by another Ratio.",
            "chainable": 1,
            "itemtype": "method",
            "name": "Ratio.prototype.multiply",
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Ratio|Number|String"
                },
                {
                    "name": "obj2",
                    "description": "",
                    "type": "Ratio|Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(2,5).multiply( 1, 2 ).toString() == \"2/10\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 574,
            "description": "Subtracts the current Ratio by another Ratio.",
            "itemtype": "method",
            "name": "Ratio.prototype.subtract",
            "chainable": 1,
            "params": [
                {
                    "name": "obj",
                    "description": "",
                    "type": "Ratio|Number|String"
                },
                {
                    "name": "obj2",
                    "description": "",
                    "type": "Ratio|Number|String",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(2,3).subtract(1,7).toString() === \"-1/3\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 592,
            "description": "From the Ratio instance, returns an new Ratio scaled down by a factor.",
            "itemtype": "method",
            "name": "Ratio.prototype.descale",
            "chainable": 1,
            "params": [
                {
                    "name": "factor",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(10,4).descale( 2 ).toString() === \"5/2\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 605,
            "description": "From the Ratio instance, returns an new Ratio raised to a power.",
            "itemtype": "method",
            "name": "Ratio.prototype.pow",
            "chainable": 1,
            "params": [
                {
                    "name": "power",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(2,4).pow(4).toString() === \"16/256\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 618,
            "description": "From the Ratio instance, returns a new Ratio scaled up by a factor.",
            "itemtype": "method",
            "name": "Ratio.prototype.scale",
            "chainable": 1,
            "params": [
                {
                    "name": "factor",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(1,10).scale(10).toString() === \"10/100\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 631,
            "description": "From the Ratio instance, returns a new Ratio by parsing the numerator and denominator.<br/>\nThis is useful if want to ensure that the Ratio contains only whole numbers in the numerator and denominator after a caclulation.",
            "itemtype": "method",
            "name": "Ratio.prototype.cleanFormat",
            "chainable": 1,
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   var a = Ratio(20,30).descale(3); <br/>\n   a.toString() == \"6.666666666666667/10\"; <br/>\n   a.cleanFormat().toString() == \"6666666666666667/10000000000000000\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 653,
            "description": "Returns a new instances that is the absolute value of the current Ratio.",
            "itemtype": "method",
            "name": "Ratio.prototype.abs",
            "chainable": 1,
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(-3,2).abs().toString() == \"3/2\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 665,
            "description": "From the Ratio instance, returns a new Ratio in the form of (numerator mod denominator)/1.<br/>\nWhich is the same as Ratio( (numerator % denominator), 1 ).",
            "itemtype": "method",
            "name": "Ratio.prototype.mod",
            "chainable": 1,
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(3,10).mod().toString() == \"3\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 678,
            "description": "Returns a new instance of the Ratio with the sign toggled.",
            "itemtype": "method",
            "name": "Ratio.prototype.negate",
            "chainable": 1,
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(1,2).negate().toString() == \"-1/2\""
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 690,
            "description": "Determines if the current Ratio is a proper fraction.",
            "itemtype": "method",
            "name": "Ratio.prototype.isProper",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "example": [
                "\n   Ratio(12,3).isProper() == false;"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 701,
            "description": "Determines the value of x. Solves the following equations.<br/>\n1. `( a/b = x/n )` or\n2. `( a/b = n/x )` <br/>\nWhere a, b are the numerator and denominator respectively of the current Ratio.<br/>\nNote: Returns null if the the string can't be split into exactly 2 elements.",
            "itemtype": "method",
            "name": "Ratio.prototype.findX",
            "chainable": 1,
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(1,4).findX(\"x/20\") == 5;"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 721,
            "description": "Switches the numerator and denominator positions.",
            "itemtype": "method",
            "name": "Ratio.prototype.reciprocal",
            "chainable": 1,
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(1,2).reciprocal().toString() == \"2/1\";"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 733,
            "description": "From the Ratio instance, approxiates the value to a new fraction with a provided denominator.\nIn otherwords, this method helps you find out what fraction with a given denominator will best\nrepresent the current numeric value of the Ratio.",
            "itemtype": "method",
            "name": "Ratio.prototype.approximateTo",
            "chainable": 1,
            "params": [
                {
                    "name": "base",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(27,100).approximateTo(\"3\").toString() == \"1/3\";"
            ],
            "class": "Ratio"
        },
        {
            "file": "..\\src\\Ratio.js",
            "line": 751,
            "description": "Same as `Ratio.prototype.approximateTo()` but operates on a arbitary amount of arguments and returns the Ratio with the closest match among the quantities.\nNote there is a error rate of 1e-9. <br/>\nTherefore, an approximated quantity is returned if the absolute value of the difference between the approximated quantity and actual value is smaller than the error rate.",
            "itemtype": "method",
            "name": "Ratio.prototype.toQuantityOf",
            "chainable": 1,
            "see": [
                "Ratio.prototype.approximateTo"
            ],
            "params": [
                {
                    "name": "base",
                    "description": "",
                    "type": "Number, ..."
                }
            ],
            "return": {
                "description": "",
                "type": "Ratio"
            },
            "example": [
                "\n   Ratio(1,2).toQuantityOf(2,3,4).toString() === \"1/3\";"
            ],
            "class": "Ratio"
        }
    ]
}