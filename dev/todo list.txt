Todo List
---------
// Ratio.js code
@todo find out how `.toLocaleString()` should handle with `e` types in the numerator and denominator relating to other types.
@todo Extra: Add a division method.
@todo Find out if cleanFormat() could be replaced with reduce()

// testing
@todo Add at least 5 user cases. a.add(4).toFraction() doesn't copy over the divSign.
	Ex: Ratio.parse(1/3).negate().add("-0.1").multiply(0xF3).divide(1,2).divide(1e-4).abs().toString()
@todo Add to benchmark each main api.
@todo Create an algebric table for toString() and toLocaleString()

Keep:

	Ratio.VERSION

	Ratio.random
	Ratio.parse

	Ratio.prototype.abs
	Ratio.prototype.add
	Ratio.prototype.ceil
	Ratio.prototype.clone
	Ratio.prototype.deepEquals
	Ratio.prototype.denominator
	Ratio.prototype.descale
	Ratio.prototype.divide
	Ratio.prototype.equals
	Ratio.prototype.floor
	Ratio.prototype.isNaN
	Ratio.prototype.mod
	Ratio.prototype.multiply
	Ratio.prototype.negate
	Ratio.prototype.numerator
	Ratio.prototype.pow
	Ratio.prototype.reciprocal
	Ratio.prototype.scale
	Ratio.prototype.simplify
	Ratio.prototype.subtract
	Ratio.prototype.toArray
	Ratio.prototype.toLocaleString
	Ratio.prototype.toQuantityOf
	Ratio.prototype.toString
	Ratio.prototype.valueOf

Consider removing 

	?Ratio.gcd
	?Ratio.isNumeric
	?Ratio.guessType
	?Ratio.getPrimeFactors
	?Ratio.prototype.findX
	?Ratio.MAX_PRECISION
	?Ratio.MAX_VALUE
	?Ratio.MIN_VALUE

Remove 

	- Ratio.getCleanENotation
	- Ratio.getCombinedRatio
	- Ratio.getNumeratorWithSign
	- Ratio.getRepeatProps
	- Ratio.getValueIfDefined
	- Ratio.parseToArray
	- Ratio.prototype.cleanFormat
	- Ratio.prototype.correctRatio
	- Ratio.prototype.isProper
	- Ratio.prototype.makeProper
	- Ratio.simplify
	- Ratio.simplifyENotation
	- Ratio.regex
